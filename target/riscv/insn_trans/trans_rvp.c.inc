/*
 * RISC-V translation routines for the P Standard Extensions.
 *
 * Copyright (c) 2020-2023 PLCT Lab
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2 or later, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program.  If not, see <http://www.gnu.org/licenses/>.
 */


/* Save a 64 bit data in src to dst and dst + 1 */
static void set_pair_regs(DisasContext *ctx, int dst, TCGv_i64 src)
{
#if defined(TARGET_RISCV32)
    TCGv_i64 tl_64 = tcg_temp_new_i64();
    TCGv_i64 th_64 = tcg_temp_new_i64();
    TCGv_i32 tl_32 = tcg_temp_new_i32();
    TCGv_i32 th_32 = tcg_temp_new_i32();
    tcg_gen_extract_i64(tl_64, src, 0, 32);
    tcg_gen_extract_i64(th_64, src, 32, 32);
    tcg_gen_trunc_i64_tl(tl_32, tl_64);
    tcg_gen_trunc_i64_tl(th_32, th_64);
    gen_set_gpr(ctx, dst, tl_32);
    gen_set_gpr(ctx, dst + 1, th_32);
# else
    gen_set_gpr(ctx, dst, src);
#endif
}

/* Concat two 32 bit data in src and src + 1 to dst */
static void get_pair_regs(DisasContext *ctx, TCGv_i64 dst, int src)
{
#if defined(TARGET_RISCV32)
    TCGv t1 = get_gpr(ctx, src, EXT_NONE);
    TCGv t2 = get_gpr(ctx, src + 1, EXT_NONE);
    tcg_gen_concat_i32_i64(dst, t1, t2);
#else
    TCGv t1 = get_gpr(ctx, src, EXT_NONE);
    tcg_gen_mov_tl(dst, t1);
#endif
}

#define GEN_SIMD_TRANS(NAME)                                \
static bool trans_##NAME(DisasContext *ctx, arg_##NAME * a) \
{                                                           \
   TCGv src1 = get_gpr(ctx, a->rs1, EXT_NONE);              \
   TCGv src2 = get_gpr(ctx, a->rs2, EXT_NONE);              \
   TCGv dest = dest_gpr(ctx, a->rd);                        \
   gen_helper_##NAME(dest, tcg_env, src1, src2);            \
   return true;                                             \
}

#if defined(TARGET_RISCV32)
#define GEN_SIMD_TRANS_32(NAME)                             \
static bool trans_##NAME(DisasContext *ctx, arg_##NAME *a)  \
{                                                           \
    REQUIRE_32BIT(ctx);                                     \
    TCGv src1 = get_gpr(ctx, a->rs1, EXT_NONE);             \
    TCGv src2 = get_gpr(ctx, a->rs2, EXT_NONE);             \
    TCGv dest = dest_gpr(ctx, a->rd);                       \
    gen_helper_##NAME(dest, tcg_env, src1, src2);           \
    return true;                                            \
}                                                           
#else
#define GEN_SIMD_TRANS_32(NAME)                             \
static bool trans_##NAME(DisasContext *ctx, arg_##NAME *a)  \
{                                                           \
    REQUIRE_32BIT(ctx);                                     \
    return true;                                            \
}
#endif

#if defined(TARGET_RISCV32)
#define GEN_SIMD_TRANS_64(NAME)                             \
static bool trans_##NAME(DisasContext *ctx, arg_##NAME *a)  \
{                                                           \
   REQUIRE_64BIT(ctx);                                      \
   return true;                                             \
}                                                           
#else
#define GEN_SIMD_TRANS_64(NAME)                             \
static bool trans_##NAME(DisasContext *ctx, arg_##NAME *a)  \
{                                                           \
    REQUIRE_64BIT(ctx);                                     \
    TCGv src1 = get_gpr(ctx, a->rs1, EXT_NONE);             \
    TCGv src2 = get_gpr(ctx, a->rs2, EXT_NONE);             \
    TCGv dest = dest_gpr(ctx, a->rd);                       \
    gen_helper_##NAME(dest, tcg_env, src1, src2);           \
    return true;                                            \
}
#endif

#define GEN_SIMD_TRANS_RD(NAME)                             \
static bool trans_##NAME(DisasContext *ctx, arg_##NAME * a) \
{                                                           \
    TCGv src1 = get_gpr(ctx, a->rs1, EXT_NONE);             \
    TCGv src2 = get_gpr(ctx, a->rs2, EXT_NONE);             \
    TCGv dest = dest_gpr(ctx, a->rd);                       \
    TCGv t = tcg_temp_new();                                \
    gen_helper_##NAME(t, tcg_env, src1, src2, dest);        \
    gen_set_gpr(ctx, a->rd, t);                             \
    return true;                                            \
}

#if defined(TARGET_RISCV32)
#define GEN_SIMD_TRANS_RD_64(NAME)                          \
static bool trans_##NAME(DisasContext *ctx, arg_##NAME * a) \
{                                                           \
    REQUIRE_64BIT(ctx);                                     \
    return true;                                            \
}
#else
#define GEN_SIMD_TRANS_RD_64(NAME)                          \
static bool trans_##NAME(DisasContext *ctx, arg_##NAME * a) \
{                                                           \
    REQUIRE_64BIT(ctx);                                     \
    TCGv src1 = get_gpr(ctx, a->rs1, EXT_NONE);             \
    TCGv src2 = get_gpr(ctx, a->rs2, EXT_NONE);             \
    TCGv dest = dest_gpr(ctx, a->rd);                       \
    TCGv t = tcg_temp_new();                                \
    gen_helper_##NAME(t, tcg_env, src1, src2, dest);        \
    gen_set_gpr(ctx, a->rd, t);                             \
    return true;                                            \
}
#endif

#define GEN_SIMD_TRANS_R1(NAME)                             \
static bool trans_##NAME(DisasContext *ctx, arg_##NAME * a) \
{                                                           \
    TCGv src1 = get_gpr(ctx, a->rs1, EXT_NONE);             \
    TCGv dest = dest_gpr(ctx, a->rd);                       \
    gen_helper_##NAME(dest, tcg_env, src1);                 \
    gen_set_gpr(ctx, a->rd, dest);                          \
    return true;                                            \
}

#if defined(TARGET_RISCV32)
#define GEN_SIMD_TRANS_R1_64(NAME)                          \
static bool trans_##NAME(DisasContext *ctx, arg_##NAME * a) \
{                                                           \
    REQUIRE_64BIT(ctx);                                     \
    return true;                                            \
}
#else
#define GEN_SIMD_TRANS_R1_64(NAME)                          \
static bool trans_##NAME(DisasContext *ctx, arg_##NAME * a) \
{                                                           \
    REQUIRE_64BIT(ctx);                                     \
    TCGv src1 = get_gpr(ctx, a->rs1, EXT_NONE);             \
    TCGv dest = dest_gpr(ctx, a->rd);                       \
    gen_helper_##NAME(dest, tcg_env, src1);                 \
    return true;                                            \
}
#endif

#define GEN_SIMD_TRANS_IMM(NAME)                          \
static bool trans_##NAME(DisasContext *ctx, arg_##NAME * a) \
{                                                           \
    TCGv src1 = get_gpr(ctx, a->rs1, EXT_NONE);             \
    TCGv imm = tcg_constant_tl(a->imm);                     \
    TCGv dest = dest_gpr(ctx, a->rd);                       \
    gen_helper_##NAME(dest, tcg_env, src1, imm);            \
    return true;                                            \
}

#if defined(TARGET_RISCV32)
#define GEN_SIMD_TRANS_IMM_32(NAME)                       \
static bool trans_##NAME(DisasContext *ctx, arg_##NAME * a) \
{                                                           \
    REQUIRE_32BIT(ctx);                                     \
    TCGv src1 = get_gpr(ctx, a->rs1, EXT_NONE);             \
    TCGv imm = tcg_constant_tl(a->imm);                     \
    TCGv dest = dest_gpr(ctx, a->rd);                       \
    gen_helper_##NAME(dest, tcg_env, src1, imm);            \
    return true;                                            \
}
#else
#define GEN_SIMD_TRANS_IMM_32(NAME)                       \
static bool trans_##NAME(DisasContext *ctx, arg_##NAME * a) \
{                                                           \
    REQUIRE_32BIT(ctx);                                     \
    return true;                                            \
}
#endif

#if defined(TARGET_RISCV32)
#define GEN_SIMD_TRANS_IMM_64(NAME)                       \
static bool trans_##NAME(DisasContext *ctx, arg_##NAME * a) \
{                                                           \
    REQUIRE_64BIT(ctx);                                     \
    return true;                                            \
}
#else
#define GEN_SIMD_TRANS_IMM_64(NAME)                       \
static bool trans_##NAME(DisasContext *ctx, arg_##NAME * a) \
{                                                           \
    REQUIRE_64BIT(ctx);                                     \
    TCGv src1 = get_gpr(ctx, a->rs1, EXT_NONE);             \
    TCGv imm = tcg_constant_tl(a->imm);                     \
    TCGv dest = dest_gpr(ctx, a->rd);                       \
    gen_helper_##NAME(dest, tcg_env, src1, imm);            \
    return true;                                            \
}
#endif

#if defined(TARGET_RISCV32)
#define GEN_SIMD_TRANS_RD_P(NAME)                       \
static bool trans_##NAME(DisasContext *ctx, arg_##NAME * a) \
{                                                           \
    REQUIRE_32BIT(ctx);                                     \
    TCGv src1 = get_gpr(ctx, a->rs1, EXT_NONE);             \
    TCGv src2 = get_gpr(ctx, a->rs2, EXT_NONE);             \
    TCGv_i64 rs1_64 = tcg_temp_new_i64();                   \
    TCGv_i64 rs2_64 = tcg_temp_new_i64();                   \
    tcg_gen_extu_tl_i64(rs1_64, src1);                      \
    tcg_gen_extu_tl_i64(rs2_64, src2);                      \
    TCGv_i64 t = tcg_temp_new_i64();                        \
    gen_helper_##NAME(t, tcg_env, rs1_64, rs2_64);          \
    set_pair_regs(ctx, (a->rd_p)*2, t);                     \
    return true;                                            \
}
#else
#define GEN_SIMD_TRANS_RD_P(NAME)                       \
static bool trans_##NAME(DisasContext *ctx, arg_##NAME * a) \
{                                                           \
    REQUIRE_32BIT(ctx);                                     \
    return true;                                            \
}
#endif

#if defined(TARGET_RISCV32)
#define GEN_SIMD_TRANS_IMM_RD_P(NAME)                       \
static bool trans_##NAME(DisasContext *ctx, arg_##NAME * a) \
{                                                           \
    REQUIRE_32BIT(ctx);                                     \
    TCGv src1 = get_gpr(ctx, a->rs1, EXT_NONE);             \
    TCGv_i64 rs1_64 = tcg_temp_new_i64();                   \
    tcg_gen_extu_tl_i64(rs1_64, src1);                      \
    TCGv_i64 imm = tcg_constant_i64(a->imm);                     \
    TCGv_i64 t = tcg_temp_new_i64();                        \
    gen_helper_##NAME(t, tcg_env, rs1_64, imm);             \
    set_pair_regs(ctx, (a->rd_p)*2, t);                     \
    return true;                                            \
}
#else
#define GEN_SIMD_TRANS_IMM_RD_P(NAME)                       \
static bool trans_##NAME(DisasContext *ctx, arg_##NAME * a) \
{                                                           \
    REQUIRE_32BIT(ctx);                                     \
    return true;                                            \
}
#endif

#if defined(TARGET_RISCV32)
#define GEN_SIMD_TRANS_RD_RD_P(NAME)                        \
static bool trans_##NAME(DisasContext *ctx, arg_##NAME * a) \
{                                                           \
    REQUIRE_32BIT(ctx);                                     \
    TCGv src1 = get_gpr(ctx, a->rs1, EXT_NONE);             \
    TCGv src2 = get_gpr(ctx, a->rs2, EXT_NONE);             \
    TCGv_i64 rs1_64 = tcg_temp_new_i64();                   \
    TCGv_i64 rs2_64 = tcg_temp_new_i64();                   \
    tcg_gen_extu_tl_i64(rs1_64, src1);                      \
    tcg_gen_extu_tl_i64(rs2_64, src2);                      \
    TCGv_i64 t = tcg_temp_new_i64();                        \
    if(a->rd_p == 0){                                       \
        tcg_gen_movi_i64(t, 0);                             \
    }else{                                                  \
        get_pair_regs(ctx, t, (a->rd_p)*2);                 \
    }                                                       \
    gen_helper_##NAME(t, tcg_env, rs1_64, rs2_64, t);       \
    set_pair_regs(ctx, (a->rd_p)*2, t);                     \
    return true;                                            \
}
#else
#define GEN_SIMD_TRANS_RD_RD_P(NAME)                        \
static bool trans_##NAME(DisasContext *ctx, arg_##NAME * a) \
{                                                           \
    REQUIRE_32BIT(ctx);                                     \
    return true;                                            \
}
#endif

GEN_SIMD_TRANS(padd_b)
GEN_SIMD_TRANS(padd_bs)
GEN_SIMD_TRANS(psub_b)
GEN_SIMD_TRANS(psadd_b)
GEN_SIMD_TRANS(psaddu_b)
GEN_SIMD_TRANS(pssub_b)
GEN_SIMD_TRANS(pssubu_b)
GEN_SIMD_TRANS(paadd_b)
GEN_SIMD_TRANS(paaddu_b)
GEN_SIMD_TRANS(pasub_b)
GEN_SIMD_TRANS(pasubu_b)
GEN_SIMD_TRANS(pdifsumu_b)
GEN_SIMD_TRANS_RD(pdifsumau_b)
GEN_SIMD_TRANS_R1(psabs_b)
GEN_SIMD_TRANS(pdif_b)
GEN_SIMD_TRANS(pdifu_b)
GEN_SIMD_TRANS(predsum_bs)
GEN_SIMD_TRANS(predsumu_bs)

GEN_SIMD_TRANS(padd_h)
GEN_SIMD_TRANS(padd_hs)
GEN_SIMD_TRANS(psub_h)
GEN_SIMD_TRANS(psadd_h)
GEN_SIMD_TRANS(psaddu_h)
GEN_SIMD_TRANS(pssub_h)
GEN_SIMD_TRANS(pssubu_h)
GEN_SIMD_TRANS(paadd_h)
GEN_SIMD_TRANS(paaddu_h)
GEN_SIMD_TRANS(pasub_h)
GEN_SIMD_TRANS(pasubu_h)

GEN_SIMD_TRANS(psh1add_h)
GEN_SIMD_TRANS(pssh1sadd_h)

GEN_SIMD_TRANS(pas_hx)
GEN_SIMD_TRANS(psa_hx)
GEN_SIMD_TRANS(psas_hx)
GEN_SIMD_TRANS(pssa_hx)
GEN_SIMD_TRANS(paas_hx)
GEN_SIMD_TRANS(pasa_hx)

GEN_SIMD_TRANS(pdif_h)
GEN_SIMD_TRANS(pdifu_h)
GEN_SIMD_TRANS_R1(psabs_h)

GEN_SIMD_TRANS(predsum_hs)
GEN_SIMD_TRANS(predsumu_hs)

GEN_SIMD_TRANS_32(sadd)
GEN_SIMD_TRANS_32(saddu)
GEN_SIMD_TRANS_32(ssub)
GEN_SIMD_TRANS_32(ssubu)
GEN_SIMD_TRANS_32(aadd)
GEN_SIMD_TRANS_32(aaddu)
GEN_SIMD_TRANS_32(asub)
GEN_SIMD_TRANS_32(asubu)
GEN_SIMD_TRANS_32(ssh1sadd)

GEN_SIMD_TRANS_64(padd_ws)
GEN_SIMD_TRANS_64(padd_w)
GEN_SIMD_TRANS_64(psub_w)
GEN_SIMD_TRANS_64(psadd_w)
GEN_SIMD_TRANS_64(psaddu_w)
GEN_SIMD_TRANS_64(pssub_w)
GEN_SIMD_TRANS_64(pssubu_w)
GEN_SIMD_TRANS_64(paadd_w)
GEN_SIMD_TRANS_64(paaddu_w)
GEN_SIMD_TRANS_64(pasub_w)
GEN_SIMD_TRANS_64(pasubu_w)
GEN_SIMD_TRANS_64(psh1add_w)
GEN_SIMD_TRANS_64(pssh1sadd_w)
GEN_SIMD_TRANS_64(pas_wx)
GEN_SIMD_TRANS_64(psa_wx)
GEN_SIMD_TRANS_64(psas_wx)
GEN_SIMD_TRANS_64(pssa_wx)
GEN_SIMD_TRANS_64(paas_wx)
GEN_SIMD_TRANS_64(pasa_wx)
GEN_SIMD_TRANS_64(predsum_ws)
GEN_SIMD_TRANS_64(predsumu_ws)

GEN_SIMD_TRANS_IMM(pslli_b)
GEN_SIMD_TRANS(psll_bs)
GEN_SIMD_TRANS_IMM(psrli_b)
GEN_SIMD_TRANS(psrl_bs)
GEN_SIMD_TRANS_IMM(psrai_b)
GEN_SIMD_TRANS(psra_bs)
GEN_SIMD_TRANS(pmin_b)
GEN_SIMD_TRANS(pminu_b)
GEN_SIMD_TRANS(pmax_b)
GEN_SIMD_TRANS(pmaxu_b)
GEN_SIMD_TRANS(pmseq_b)
GEN_SIMD_TRANS(pmslt_b)
GEN_SIMD_TRANS(pmsltu_b)

GEN_SIMD_TRANS_R1(psext_h_b)
GEN_SIMD_TRANS_IMM(psati_h)
GEN_SIMD_TRANS_IMM(pusati_h)
GEN_SIMD_TRANS_IMM(pslli_h)
GEN_SIMD_TRANS(psll_hs)
GEN_SIMD_TRANS_IMM(psrli_h)
GEN_SIMD_TRANS(psrl_hs)
GEN_SIMD_TRANS_IMM(psrai_h)
GEN_SIMD_TRANS(psra_hs)
GEN_SIMD_TRANS_IMM(psslai_h)
GEN_SIMD_TRANS_IMM(psrari_h)
GEN_SIMD_TRANS(pssha_hs)
GEN_SIMD_TRANS(psshar_hs)
GEN_SIMD_TRANS(pmin_h)
GEN_SIMD_TRANS(pminu_h)
GEN_SIMD_TRANS(pmax_h)
GEN_SIMD_TRANS(pmaxu_h)
GEN_SIMD_TRANS(pmseq_h)
GEN_SIMD_TRANS(pmslt_h)
GEN_SIMD_TRANS(pmsltu_h)

GEN_SIMD_TRANS_IMM_32(sati_32)
GEN_SIMD_TRANS_IMM_32(usati_32)
GEN_SIMD_TRANS_IMM_32(sslai)
GEN_SIMD_TRANS_IMM_32(srari_32)
GEN_SIMD_TRANS_32(ssha)
GEN_SIMD_TRANS_32(sshar)
GEN_SIMD_TRANS_32(mseq)
GEN_SIMD_TRANS_32(mslt)
GEN_SIMD_TRANS_32(msltu)

GEN_SIMD_TRANS_R1_64(psext_w_b)
GEN_SIMD_TRANS_R1_64(psext_w_h)
GEN_SIMD_TRANS_IMM_64(psati_w)
GEN_SIMD_TRANS_IMM_64(pusati_w)
GEN_SIMD_TRANS_IMM_64(pslli_w)
GEN_SIMD_TRANS_64(psll_ws)
GEN_SIMD_TRANS_IMM_64(psrli_w)
GEN_SIMD_TRANS_64(psrl_ws)
GEN_SIMD_TRANS_IMM_64(psrai_w)
GEN_SIMD_TRANS_64(psra_ws)
GEN_SIMD_TRANS_IMM_64(psslai_w)
GEN_SIMD_TRANS_IMM_64(psrari_w)
GEN_SIMD_TRANS_64(pssha_ws)
GEN_SIMD_TRANS_64(psshar_ws)
GEN_SIMD_TRANS_64(pmin_w)
GEN_SIMD_TRANS_64(pminu_w)
GEN_SIMD_TRANS_64(pmax_w)
GEN_SIMD_TRANS_64(pmaxu_w)
GEN_SIMD_TRANS_64(pmseq_w)
GEN_SIMD_TRANS_64(pmslt_w)
GEN_SIMD_TRANS_64(pmsltu_w)

GEN_SIMD_TRANS_IMM_64(sati_64)
GEN_SIMD_TRANS_IMM_64(usati_64)
GEN_SIMD_TRANS_IMM_64(srari_64)
GEN_SIMD_TRANS_64(sha)
GEN_SIMD_TRANS_64(shar)

GEN_SIMD_TRANS(ppack_h)
GEN_SIMD_TRANS(ppackbt_h)
GEN_SIMD_TRANS(ppacktb_h)
GEN_SIMD_TRANS(ppackt_h)

GEN_SIMD_TRANS_32(packbt_32)
GEN_SIMD_TRANS_32(packtb_32)
GEN_SIMD_TRANS_32(packt_32)

GEN_SIMD_TRANS_64(ppack_w)
GEN_SIMD_TRANS_64(ppackbt_w)
GEN_SIMD_TRANS_64(ppacktb_w)
GEN_SIMD_TRANS_64(ppackt_w)

GEN_SIMD_TRANS_64(packbt_64)
GEN_SIMD_TRANS_64(packtb_64)
GEN_SIMD_TRANS_64(packt_64)

GEN_SIMD_TRANS_64(zip8p)
GEN_SIMD_TRANS_64(zip8hp)
GEN_SIMD_TRANS_64(unzip8p)
GEN_SIMD_TRANS_64(unzip8hp)

GEN_SIMD_TRANS_R1_64(rev16)
GEN_SIMD_TRANS_64(zip16p)
GEN_SIMD_TRANS_64(zip16hp)
GEN_SIMD_TRANS_64(unzip16p)
GEN_SIMD_TRANS_64(unzip16hp)

GEN_SIMD_TRANS_R1(abs)
GEN_SIMD_TRANS_R1(cls)
GEN_SIMD_TRANS_R1(rev)
GEN_SIMD_TRANS_RD(slx)
GEN_SIMD_TRANS_RD(srx)
GEN_SIMD_TRANS_RD(mvm)
GEN_SIMD_TRANS_RD(mvmn)
GEN_SIMD_TRANS_RD(merge)

GEN_SIMD_TRANS_R1_64(absw)
GEN_SIMD_TRANS_R1_64(clsw)

GEN_SIMD_TRANS_RD_P(pwadd_b)
GEN_SIMD_TRANS_RD_RD_P(pwadda_b)
GEN_SIMD_TRANS_RD_P(pwaddu_b)
GEN_SIMD_TRANS_RD_RD_P(pwaddau_b)
GEN_SIMD_TRANS_RD_P(pwsub_b)
GEN_SIMD_TRANS_RD_RD_P(pwsuba_b)
GEN_SIMD_TRANS_RD_P(pwsubu_b)
GEN_SIMD_TRANS_RD_RD_P(pwsubau_b)
GEN_SIMD_TRANS_IMM_RD_P(pwslli_b)
GEN_SIMD_TRANS_RD_P(pwsll_bs)
GEN_SIMD_TRANS_IMM_RD_P(pwslai_b)
GEN_SIMD_TRANS_RD_P(pwsla_bs)

GEN_SIMD_TRANS_RD_P(pwadd_h)
GEN_SIMD_TRANS_RD_RD_P(pwadda_h)
GEN_SIMD_TRANS_RD_P(pwaddu_h)
GEN_SIMD_TRANS_RD_RD_P(pwaddau_h)
GEN_SIMD_TRANS_RD_P(pwsub_h)
GEN_SIMD_TRANS_RD_RD_P(pwsuba_h)
GEN_SIMD_TRANS_RD_P(pwsubu_h)
GEN_SIMD_TRANS_RD_RD_P(pwsubau_h)
GEN_SIMD_TRANS_IMM_RD_P(pwslli_h)
GEN_SIMD_TRANS_RD_P(pwsll_hs)
GEN_SIMD_TRANS_IMM_RD_P(pwslai_h)
GEN_SIMD_TRANS_RD_P(pwsla_hs)

GEN_SIMD_TRANS_RD_P(wadd)
GEN_SIMD_TRANS_RD_RD_P(wadda)
GEN_SIMD_TRANS_RD_P(waddu)
GEN_SIMD_TRANS_RD_RD_P(waddau)
GEN_SIMD_TRANS_RD_P(wsub)
GEN_SIMD_TRANS_RD_RD_P(wsuba)
GEN_SIMD_TRANS_RD_P(wsubu)
GEN_SIMD_TRANS_RD_RD_P(wsubau)

GEN_SIMD_TRANS_IMM_RD_P(wslli)
GEN_SIMD_TRANS_RD_P(wsll)
GEN_SIMD_TRANS_IMM_RD_P(wslai)
GEN_SIMD_TRANS_RD_P(wsla)

/* wzip8p and wzip16p need to verify rd_p is not zero register in trans functions */
static bool trans_wzip8p(DisasContext *ctx, arg_wzip8p * a)
{
    REQUIRE_32BIT(ctx);
    TCGv src1 = get_gpr(ctx, a->rs1, EXT_NONE);
    TCGv src2 = get_gpr(ctx, a->rs2, EXT_NONE);
    TCGv_i64 rs1_64 = tcg_temp_new_i64();
    TCGv_i64 rs2_64 = tcg_temp_new_i64();
    tcg_gen_extu_tl_i64(rs1_64, src1);
    tcg_gen_extu_tl_i64(rs2_64, src2);
    TCGv_i64 t = tcg_temp_new_i64();
    if(a->rd_p == 0){
        return true;
    }else{
        get_pair_regs(ctx, t, (a->rd_p)*2);
    }
    gen_helper_wzip8p(t, tcg_env, rs1_64, rs2_64);
    set_pair_regs(ctx, (a->rd_p)*2, t);
    return true;
}

static bool trans_wzip16p(DisasContext *ctx, arg_wzip16p * a)
{
    REQUIRE_32BIT(ctx);
    TCGv src1 = get_gpr(ctx, a->rs1, EXT_NONE);
    TCGv src2 = get_gpr(ctx, a->rs2, EXT_NONE);
    TCGv_i64 rs1_64 = tcg_temp_new_i64();
    TCGv_i64 rs2_64 = tcg_temp_new_i64();
    tcg_gen_extu_tl_i64(rs1_64, src1);
    tcg_gen_extu_tl_i64(rs2_64, src2);
    TCGv_i64 t = tcg_temp_new_i64();
    if(a->rd_p == 0){
        return true;
    }else{
        get_pair_regs(ctx, t, (a->rd_p)*2);
    }
    gen_helper_wzip16p(t, tcg_env, rs1_64, rs2_64);
    set_pair_regs(ctx, (a->rd_p)*2, t);
    return true;
}

static bool trans_pli_b(DisasContext *ctx, arg_pli_b *a)
{
    int i = 1;
    target_long imm = a->imm;
    while (i < TARGET_LONG_SIZE){
        imm = (( imm << 8 ) + a->imm);
	    i++;
    }
    gen_set_gpri(ctx, a->rd, imm);
    return true;
}

static bool trans_pli_h(DisasContext *ctx, arg_pli_h *a)
{
    int i = 1;
    target_long imm = a->imm;
    while (i < TARGET_LONG_SIZE / 2){
        imm =( imm << 16 ) + (a->imm & 0xFFFF);
	    i++;
    }
    gen_set_gpri(ctx, a->rd, imm);
    return true;
}

static bool trans_plui_h(DisasContext *ctx, arg_plui_h *a)
{
    int i = 1;
    target_long imm = a->imm;
    while (i < TARGET_LONG_SIZE / 2){
        imm =( imm << 16 ) + (a->imm & 0xFFFF);
	    i++;
    }
    gen_set_gpri(ctx, a->rd, imm);
    return true;
}

static bool trans_pli_w(DisasContext *ctx, arg_pli_w *a)
{
    REQUIRE_64BIT(ctx);
    int i = 1;
    int64_t imm = a->imm;
    while (i < TARGET_LONG_SIZE / 4){
        imm =( imm << 32 ) + (a->imm & 0xFFFFFFFF);
	    i++;
    }
    gen_set_gpri(ctx, a->rd, imm);
    return true;
}

static bool trans_plui_w(DisasContext *ctx, arg_plui_w *a)
{
    REQUIRE_64BIT(ctx);
    int i = 1;
    int64_t imm = a->imm;
    while (i < TARGET_LONG_SIZE / 4){
        imm =( imm << 32 ) + (a->imm & 0xFFFFFFFF);
	    i++;
    }
    gen_set_gpri(ctx, a->rd, imm);
    return true;
}
